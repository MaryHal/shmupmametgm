* shmupmametgm :TOC_5_gh:
  - [[#building][Building]]
    - [[#troubleshooting][Troubleshooting]]
  - [[#tetromino-logger][Tetromino Logger]]
    - [[#fumenizer][Fumenizer]]
      - [[#enabling-fumenizer][Enabling fumenizer]]
    - [[#taptracker][TapTracker]]
      - [[#enabling-taptracker][Enabling taptracker]]
      - [[#using-taptracker-data][Using TapTracker data]]
        - [[#in-c][In C]]
        - [[#in-python][In Python]]

** Building
#+BEGIN_SRC sh
make SUBTARGET=tgm NOWERROR=1
#+END_SRC

*** Troubleshooting
If you see errors like this:

#+BEGIN_SRC text
src/osd/windows/winwork.c:205:17: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
  return (void *)result;
                 ^~~~~~
#+END_SRC

Add "PTR64=1" to the make line.
** Tetromino Logger
*** Fumenizer
This version of shmupmametgm has been modified so that it can output piece placement data to a text file when a game of tgm2p is completed. You can then paste the file's contents [[http://rawgit.com/sanford1/shmupmametgm/master/fumen_encode.html][here]] (fumen_encode.html) to generate a [[http://fumen.zui.jp/][fumen]] diagram of the game. For now, this only works for player 1 in tgm2p.
**** Enabling fumenizer
To enable this functionality, you must either run shmupmametgm with the =-fumen= switch like so:

#+BEGIN_SRC sh
mametgm64 -fumen tgm2p
#+END_SRC

Or enable it in your =mame.ini= file:

#+BEGIN_SRC  text
# In mame.ini
fumen          1
#+END_SRC
*** TapTracker
If you're using *nix, this version of shmupmametgm can also write tgm2p data to a memory mapped file at =/dev/shm/taptracker_data=. With this, other processes can read constantly updated data from tgm2p in MAME for logging purposes, or whatever you can think of! I've written a level graph, section data viewer, and button viewer that you can run alongside shmupmametgm [[https://github.com/sanford1/TapTracker][here]] (also called TapTracker). On Windows, this file is located at =%APPDATA%\taptracker_data=.
**** Enabling taptracker
Similar to fumenizer, you can activate this functionality for tgm2p with the =-taptracker= switch:

#+BEGIN_SRC sh
mametgm64 -taptracker tgm2p
#+END_SRC

Or enable it in your =mame.ini= file (not recommended):

#+BEGIN_SRC text
# In mame.ini
taptracker     1
#+END_SRC
**** Using TapTracker data
***** In C
****** Memory Struct

#+BEGIN_SRC C
// int*_t definitions can be found in stdint.h
struct tap_state
{
        int16_t state;
        int16_t grade;
        int16_t gradePoints;

        int16_t level;
        int16_t timer;

        int16_t tetromino;
        int16_t xcoord;
        int16_t ycoord;
        int16_t rotation;
        int16_t mrollFlags;
        int16_t inCreditRoll;

        int16_t gameMode;
};
#+END_SRC

****** Map a block of memory

#+BEGIN_SRC C
const char* sharedMemKey = "taptracker_data";
int fd = shm_open(sharedMemKey, O_RDONLY, S_IRWXO | S_IRWXG | S_IRWXU);
if (fd < 0)
{
    perror("Could not create shared memory object");
    return 1;
}

const size_t vSize = sizeof(struct tap_state);

struct tap_state* addr = (struct tap_state*)mmap(NULL, vSize, PROT_READ, MAP_SHARED, fd, 0);
if (addr == MAP_FAILED)
{
    perror("Parent: Could not map memory");
}
#+END_SRC

Here, the data that =addr= points to will be updated by our MAME process.

****** Cleanup

#+BEGIN_SRC C
if (munmap(addr, vSize) != 0)
    perror("Error unmapping memory pointer");

if (close(fd) != 0)
    perror("Error closing file");
#+END_SRC

***** In Python
****** Full example
#+BEGIN_SRC python
  import mmap

  import struct
  import time

  DATA_BLOCK_SIZE = 2

  def unpack_mmap_block(mm, n):
      """Decode the nth 2-byte long byte string from mapped memory. This works with
  both python 2 and python 3"""
      return struct.unpack("@h", mm[n*DATA_BLOCK_SIZE:(n+1)*DATA_BLOCK_SIZE])[0]

  def main():
      with open("/dev/shm/taptracker_data", "r+b") as f:
          # The tap_state struct has 11 2-byte integers, so that's how many bytes
          # we're mapping.
          mm = mmap.mmap(f.fileno(), DATA_BLOCK_SIZE * 11)

          # Let's read the current game level and current timer value:
          level = unpack_mmap_block(mm, 3)
          timer = unpack_mmap_block(mm, 4)

          # In Python 3, we can do something as simple as:
          level = int(mm[3 * DATA_BLOCK_SIZE])
          timer = int(mm[4 * DATA_BLOCK_SIZE])

          # The indices of different data blocks can be found in the C "tap_state" struct above.

          # # Sleepy-time may be a good idea.
          # time.sleep(0.01)

          mm.close()

  if __name__ == '__main__':
      main()
#+END_SRC
